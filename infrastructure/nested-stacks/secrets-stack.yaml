AWSTemplateFormatVersion: '2010-09-09'
Description: 'Secrets Manager configuration for Java Authorization Server'

Parameters:
  Environment:
    Type: String
    Description: Deployment environment
  
  ProjectName:
    Type: String
    Description: Project name for resource naming

Conditions:
  IsProd: !Equals [!Ref Environment, 'prod']

Resources:
  # KMS Key for Secrets Manager encryption
  SecretsKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub 'KMS key for ${ProjectName} secrets encryption - ${Environment}'
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: secretsmanager.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: Secrets

  # KMS Key Alias
  SecretsKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/auth-server-secrets-${Environment}'
      TargetKeyId: !Ref SecretsKMSKey

  # Secrets Manager Secret for user credentials
  CredentialSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}-credentials-${Environment}'
      Description: !Sub 'User credentials for ${ProjectName} authentication - ${Environment}'
      KmsKeyId: !Ref SecretsKMSKey
      SecretString: !Sub |
        {
          "alice": {
            "passwordHash": "$argon2id$v=19$m=65536,t=3,p=4$YXJnb24yaWRfc2FsdA$J7d0J+7d0J+7d0J+7d0J+7d0J+7d0J+7d0J+7d0J+7d0J+7d0J+7d0J+7d0",
            "status": "ACTIVE",
            "roles": ["user"]
          },
          "charlie": {
            "passwordHash": "$argon2id$v=19$m=65536,t=3,p=4$Y2hhcmxpZV9zYWx0$K8e1K+8e1K+8e1K+8e1K+8e1K+8e1K+8e1K+8e1K+8e1K+8e1K+8e1K+8e1",
            "status": "ACTIVE",
            "roles": ["user"]
          },
          "admin": {
            "passwordHash": "$argon2id$v=19$m=65536,t=3,p=4$YWRtaW5fc2FsdA$M9f2M+9f2M+9f2M+9f2M+9f2M+9f2M+9f2M+9f2M+9f2M+9f2M+9f2M+9f2",
            "status": "ACTIVE",
            "roles": ["admin", "user"]
          }
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: Secrets
        - Key: RotationEnabled
          Value: !If [IsProd, 'true', 'false']

  # Secrets Manager rotation Lambda (for production)
  CredentialRotationLambda:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: IsProd
    Properties:
      SecretId: !Ref CredentialSecret
      RotationLambdaArn: !GetAtt RotationLambdaFunction.Arn
      RotationImmediate: false
      RotationInterval: 90  # 90 days

  # Lambda function for credential rotation (production only)
  RotationLambdaFunction:
    Type: AWS::Lambda::Function
    Condition: IsProd
    Properties:
      FunctionName: !Sub '${ProjectName}-credential-rotation-${Environment}'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt RotationLambdaRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              """
              Placeholder for credential rotation logic.
              In production, this would implement secure password rotation.
              """
              logger.info("Credential rotation triggered")
              
              # For now, just log the event
              logger.info(f"Rotation event: {json.dumps(event)}")
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Rotation completed successfully')
              }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: Secrets

  # IAM role for rotation Lambda
  RotationLambdaRole:
    Type: AWS::IAM::Role
    Condition: IsProd
    Properties:
      RoleName: !Sub '${ProjectName}-rotation-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManagerRotationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:UpdateSecretVersionStage
                  - secretsmanager:PutSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref CredentialSecret
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:GenerateDataKey
                Resource: !Ref SecretsKMSKey

  # Lambda permission for Secrets Manager to invoke rotation
  RotationLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: IsProd
    Properties:
      FunctionName: !Ref RotationLambdaFunction
      Action: lambda:InvokeFunction
      Principal: secretsmanager.amazonaws.com

Outputs:
  CredentialSecretArn:
    Description: ARN of the credential secret
    Value: !Ref CredentialSecret
    Export:
      Name: !Sub '${ProjectName}-${Environment}-CredentialSecretArn'
  
  CredentialSecretName:
    Description: Name of the credential secret
    Value: !Ref CredentialSecret
    Export:
      Name: !Sub '${ProjectName}-${Environment}-CredentialSecretName'
  
  SecretsKMSKeyId:
    Description: KMS Key ID for secrets encryption
    Value: !Ref SecretsKMSKey
    Export:
      Name: !Sub '${ProjectName}-${Environment}-SecretsKMSKeyId'
  
  SecretsKMSKeyArn:
    Description: KMS Key ARN for secrets encryption
    Value: !GetAtt SecretsKMSKey.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-SecretsKMSKeyArn' 