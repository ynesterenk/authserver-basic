AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM roles and policies for Java Authorization Server'

Parameters:
  Environment:
    Type: String
    Description: Deployment environment
  
  ProjectName:
    Type: String
    Description: Project name for resource naming

Resources:
  # Lambda Execution Role with least privilege
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        # Basic Lambda execution permissions
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        # X-Ray tracing permissions
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        # Secrets Manager access policy
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ProjectName}-credentials-${Environment}-*'
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Resource: "*"
                Condition:
                  StringEquals:
                    kms:ViaService: !Sub "secretsmanager.${AWS::Region}.amazonaws.com"
        
        # Dead Letter Queue access policy
        - PolicyName: SQSDeadLetterQueue
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${ProjectName}-dlq-${Environment}'
        
        # CloudWatch metrics publishing
        - PolicyName: CloudWatchMetrics
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
                Condition:
                  StringEquals:
                    cloudwatch:namespace: 
                      - "AuthServer/Custom"
                      - "AWS/Lambda"
      
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: IAM

  # API Gateway CloudWatch Logs Role
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-apigateway-logs-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: IAM

  # Service role for CloudWatch alarms to publish to SNS
  CloudWatchAlarmsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-cloudwatch-alarms-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ProjectName}-alerts-${Environment}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: IAM

Outputs:
  LambdaExecutionRoleArn:
    Description: ARN of the Lambda execution role
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-LambdaExecutionRoleArn'
  
  ApiGatewayCloudWatchRoleArn:
    Description: ARN of the API Gateway CloudWatch role
    Value: !GetAtt ApiGatewayCloudWatchRole.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-ApiGatewayCloudWatchRoleArn'
  
  CloudWatchAlarmsRoleArn:
    Description: ARN of the CloudWatch alarms role
    Value: !GetAtt CloudWatchAlarmsRole.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-CloudWatchAlarmsRoleArn' 