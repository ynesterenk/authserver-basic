#!/usr/bin/env pwsh# Azure Functions Local Testing Script# Tests all endpoints with various scenariosWrite-Host "======================================" -ForegroundColor CyanWrite-Host "Azure Functions Auth Server Test Suite" -ForegroundColor CyanWrite-Host "======================================" -ForegroundColor CyanWrite-Host ""$BaseUrl = "http://localhost:7071/api"# Helper function to make requests and display resultsfunction Test-Endpoint {    param(        [string]$Name,        [string]$Method,        [string]$Url,        [hashtable]$Headers = @{},        [object]$Body = $null,        [string]$ContentType = $null    )        Write-Host "Test: $Name" -ForegroundColor Yellow    Write-Host "-----------------------------------" -ForegroundColor Gray        try {        $params = @{            Method = $Method            Uri = $Url            Headers = $Headers            ErrorAction = 'Stop'        }                if ($Body) {            $params.Body = $Body            if ($ContentType) {                $params.ContentType = $ContentType            }        }                $response = Invoke-RestMethod @params        Write-Host "✓ Success" -ForegroundColor Green        Write-Host "Response:" -ForegroundColor Gray        $response | ConvertTo-Json -Depth 10 | Write-Host    }    catch {        Write-Host "✗ Failed" -ForegroundColor Red        Write-Host "Error: $_" -ForegroundColor Red        if ($_.ErrorDetails.Message) {            Write-Host "Response: $($_.ErrorDetails.Message)" -ForegroundColor Red        }    }    Write-Host ""}# 1. BASIC AUTHENTICATION TESTSWrite-Host "1. BASIC AUTHENTICATION TESTS" -ForegroundColor MagentaWrite-Host "=============================" -ForegroundColor MagentaWrite-Host ""# Test 1.1: Valid user (demo)Test-Endpoint -Name "1.1 Valid Basic Auth (demo user)" `    -Method "POST" `    -Url "$BaseUrl/auth/validate" `    -Headers @{        "Authorization" = "Basic ZGVtbzpkZW1vMTIz"  # demo:demo123        "Content-Type" = "application/json"    }# Test 1.2: Valid admin userTest-Endpoint -Name "1.2 Valid Basic Auth (admin user)" `    -Method "POST" `    -Url "$BaseUrl/auth/validate" `    -Headers @{        "Authorization" = "Basic YWRtaW46YWRtaW4xMjM="  # admin:admin123        "Content-Type" = "application/json"    }# Test 1.3: Disabled user (test)Test-Endpoint -Name "1.3 Basic Auth with disabled user" `    -Method "POST" `    -Url "$BaseUrl/auth/validate" `    -Headers @{        "Authorization" = "Basic dGVzdDp0ZXN0MTIz"  # test:test123        "Content-Type" = "application/json"    }# Test 1.4: Invalid passwordTest-Endpoint -Name "1.4 Basic Auth with wrong password" `    -Method "POST" `    -Url "$BaseUrl/auth/validate" `    -Headers @{        "Authorization" = "Basic ZGVtbzp3cm9uZ3Bhc3M="  # demo:wrongpass        "Content-Type" = "application/json"    }# Test 1.5: Non-existent userTest-Endpoint -Name "1.5 Basic Auth with non-existent user" `    -Method "POST" `    -Url "$BaseUrl/auth/validate" `    -Headers @{        "Authorization" = "Basic bm9uZXhpc3Q6cGFzcw=="  # nonexist:pass        "Content-Type" = "application/json"    }# Test 1.6: Missing Authorization headerTest-Endpoint -Name "1.6 Basic Auth without Authorization header" `    -Method "POST" `    -Url "$BaseUrl/auth/validate" `    -Headers @{        "Content-Type" = "application/json"    }# 2. OAUTH 2.0 TOKEN TESTSWrite-Host "`n2. OAUTH 2.0 TOKEN ENDPOINT TESTS" -ForegroundColor MagentaWrite-Host "=================================" -ForegroundColor MagentaWrite-Host ""# Test 2.1: Valid client credentials (test-client)Test-Endpoint -Name "2.1 OAuth Token - Valid client (test-client)" `    -Method "POST" `    -Url "$BaseUrl/oauth/token" `    -Headers @{        "Authorization" = "Basic dGVzdC1jbGllbnQ6dGVzdC1zZWNyZXQ="  # test-client:test-secret    } `    -Body @{        grant_type = "client_credentials"        scope = "read"    } `    -ContentType "application/x-www-form-urlencoded"# Test 2.2: Valid client with multiple scopes (demo-client)Test-Endpoint -Name "2.2 OAuth Token - Multiple scopes (demo-client)" `    -Method "POST" `    -Url "$BaseUrl/oauth/token" `    -Headers @{        "Authorization" = "Basic ZGVtby1jbGllbnQ6ZGVtby1zZWNyZXQ="  # demo-client:demo-secret    } `    -Body @{        grant_type = "client_credentials"        scope = "read write"    } `    -ContentType "application/x-www-form-urlencoded"# Test 2.3: Admin client with all scopesTest-Endpoint -Name "2.3 OAuth Token - Admin client" `    -Method "POST" `    -Url "$BaseUrl/oauth/token" `    -Headers @{        "Authorization" = "Basic YWRtaW4tY2xpZW50OmFkbWluLXNlY3JldA=="  # admin-client:admin-secret    } `    -Body @{        grant_type = "client_credentials"        scope = "read write admin"    } `    -ContentType "application/x-www-form-urlencoded"# Test 2.4: Client credentials in body (not recommended but supported)Test-Endpoint -Name "2.4 OAuth Token - Credentials in body" `    -Method "POST" `    -Url "$BaseUrl/oauth/token" `    -Body @{        grant_type = "client_credentials"        client_id = "service-client"        client_secret = "service-secret"        scope = "service read"    } `    -ContentType "application/x-www-form-urlencoded"# Test 2.5: Invalid client secretTest-Endpoint -Name "2.5 OAuth Token - Wrong client secret" `    -Method "POST" `    -Url "$BaseUrl/oauth/token" `    -Headers @{        "Authorization" = "Basic dGVzdC1jbGllbnQ6d3JvbmdzZWNyZXQ="  # test-client:wrongsecret    } `    -Body @{        grant_type = "client_credentials"        scope = "read"    } `    -ContentType "application/x-www-form-urlencoded"# Test 2.6: Disabled clientTest-Endpoint -Name "2.6 OAuth Token - Disabled client" `    -Method "POST" `    -Url "$BaseUrl/oauth/token" `    -Headers @{        "Authorization" = "Basic aW5hY3RpdmUtY2xpZW50OmluYWN0aXZlLXNlY3JldA=="  # inactive-client:inactive-secret    } `    -Body @{        grant_type = "client_credentials"        scope = "read"    } `    -ContentType "application/x-www-form-urlencoded"# Test 2.7: Unsupported grant typeTest-Endpoint -Name "2.7 OAuth Token - Unsupported grant type" `    -Method "POST" `    -Url "$BaseUrl/oauth/token" `    -Headers @{        "Authorization" = "Basic dGVzdC1jbGllbnQ6dGVzdC1zZWNyZXQ="  # test-client:test-secret    } `    -Body @{        grant_type = "password"        scope = "read"    } `    -ContentType "application/x-www-form-urlencoded"# Test 2.8: Invalid scopeTest-Endpoint -Name "2.8 OAuth Token - Invalid scope" `    -Method "POST" `    -Url "$BaseUrl/oauth/token" `    -Headers @{        "Authorization" = "Basic dGVzdC1jbGllbnQ6dGVzdC1zZWNyZXQ="  # test-client:test-secret    } `    -Body @{        grant_type = "client_credentials"        scope = "admin"    } `    -ContentType "application/x-www-form-urlencoded"# Test 2.9: Missing grant typeTest-Endpoint -Name "2.9 OAuth Token - Missing grant type" `    -Method "POST" `    -Url "$BaseUrl/oauth/token" `    -Headers @{        "Authorization" = "Basic dGVzdC1jbGllbnQ6dGVzdC1zZWNyZXQ="  # test-client:test-secret    } `    -Body @{        scope = "read"    } `    -ContentType "application/x-www-form-urlencoded"# 3. OAUTH 2.0 INTROSPECTION TESTSWrite-Host "`n3. OAUTH 2.0 INTROSPECTION TESTS" -ForegroundColor MagentaWrite-Host "================================" -ForegroundColor MagentaWrite-Host ""# First, get a valid token for introspection testsWrite-Host "Getting a valid token for introspection tests..." -ForegroundColor Graytry {    $tokenResponse = Invoke-RestMethod -Method POST -Uri "$BaseUrl/oauth/token" `        -Headers @{            "Authorization" = "Basic dGVzdC1jbGllbnQ6dGVzdC1zZWNyZXQ="        } `        -Body @{            grant_type = "client_credentials"            scope = "read"        } `        -ContentType "application/x-www-form-urlencoded"        $validToken = $tokenResponse.access_token    Write-Host "Token obtained: $($validToken.Substring(0, 20))..." -ForegroundColor Gray}catch {    Write-Host "Failed to get token, using JSON format instead..." -ForegroundColor Yellow    $tokenResponse = Invoke-RestMethod -Method POST -Uri "$BaseUrl/oauth/token" `        -Headers @{            "Content-Type" = "application/json"        } `        -Body (@{            grant_type = "client_credentials"            client_id = "test-client"            client_secret = "test-secret"            scope = "read"        } | ConvertTo-Json)        $validToken = $tokenResponse.access_token    Write-Host "Token obtained: $($validToken.Substring(0, 20))..." -ForegroundColor Gray}Write-Host ""# Test 3.1: Valid token introspectionTest-Endpoint -Name "3.1 Introspect - Valid token" `    -Method "POST" `    -Url "$BaseUrl/oauth/introspect" `    -Body @{        token = $validToken    } `    -ContentType "application/x-www-form-urlencoded"# Test 3.2: Invalid tokenTest-Endpoint -Name "3.2 Introspect - Invalid token" `    -Method "POST" `    -Url "$BaseUrl/oauth/introspect" `    -Body @{        token = "invalid.jwt.token"    } `    -ContentType "application/x-www-form-urlencoded"# Test 3.3: Malformed tokenTest-Endpoint -Name "3.3 Introspect - Malformed token" `    -Method "POST" `    -Url "$BaseUrl/oauth/introspect" `    -Body @{        token = "not-even-a-jwt"    } `    -ContentType "application/x-www-form-urlencoded"# Test 3.4: Missing token parameterTest-Endpoint -Name "3.4 Introspect - Missing token" `    -Method "POST" `    -Url "$BaseUrl/oauth/introspect" `    -Body @{} `    -ContentType "application/x-www-form-urlencoded"# Test 3.5: Expired token (simulate by modifying the token)$expiredToken = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJodHRwczovL2FwaS5leGFtcGxlLmNvbSIsInN1YiI6InRlc3QtY2xpZW50Iiwic2NvcGUiOiJyZWFkIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLmV4YW1wbGUuY29tIiwiZXhwIjoxNjAwMDAwMDAwLCJ0b2tlbl90eXBlIjoiQmVhcmVyIiwiaWF0IjoxNjAwMDAwMDAwLCJqdGkiOiJleHBpcmVkLXRva2VuIiwiY2xpZW50X2lkIjoidGVzdC1jbGllbnQifQ.invalid"Test-Endpoint -Name "3.5 Introspect - Expired token" `    -Method "POST" `    -Url "$BaseUrl/oauth/introspect" `    -Body @{        token = $expiredToken    } `    -ContentType "application/x-www-form-urlencoded"# 4. EDGE CASES AND ERROR SCENARIOSWrite-Host "`n4. EDGE CASES AND ERROR SCENARIOS" -ForegroundColor MagentaWrite-Host "=================================" -ForegroundColor MagentaWrite-Host ""# Test 4.1: JSON body for OAuth token (after our update)Test-Endpoint -Name "4.1 OAuth Token - JSON body format" `    -Method "POST" `    -Url "$BaseUrl/oauth/token" `    -Headers @{        "Content-Type" = "application/json"    } `    -Body (@{        grant_type = "client_credentials"        client_id = "test-client"        client_secret = "test-secret"        scope = "read"    } | ConvertTo-Json)# Test 4.2: Large scope requestTest-Endpoint -Name "4.2 OAuth Token - Multiple scopes request" `    -Method "POST" `    -Url "$BaseUrl/oauth/token" `    -Headers @{        "Authorization" = "Basic YWRtaW4tY2xpZW50OmFkbWluLXNlY3JldA=="  # admin-client:admin-secret    } `    -Body @{        grant_type = "client_credentials"        scope = "read write admin service"    } `    -ContentType "application/x-www-form-urlencoded"# Test 4.3: Empty scopeTest-Endpoint -Name "4.3 OAuth Token - Empty scope" `    -Method "POST" `    -Url "$BaseUrl/oauth/token" `    -Headers @{        "Authorization" = "Basic dGVzdC1jbGllbnQ6dGVzdC1zZWNyZXQ="  # test-client:test-secret    } `    -Body @{        grant_type = "client_credentials"        scope = ""    } `    -ContentType "application/x-www-form-urlencoded"# Test 4.4: Special characters in credentialsTest-Endpoint -Name "4.4 Basic Auth - Special characters handling" `    -Method "POST" `    -Url "$BaseUrl/auth/validate" `    -Headers @{        "Authorization" = "Basic dXNlcjpwYXNzQDEyMyE="  # user:pass@123!        "Content-Type" = "application/json"    }Write-Host "`n======================================" -ForegroundColor CyanWrite-Host "Test Suite Completed" -ForegroundColor CyanWrite-Host "======================================" -ForegroundColor Cyan# SummaryWrite-Host "`nSummary:" -ForegroundColor YellowWrite-Host "- Basic Auth endpoint: $BaseUrl/auth/validate" -ForegroundColor GrayWrite-Host "- OAuth Token endpoint: $BaseUrl/oauth/token" -ForegroundColor GrayWrite-Host "- OAuth Introspect endpoint: $BaseUrl/oauth/introspect" -ForegroundColor GrayWrite-Host ""Write-Host "Available test users:" -ForegroundColor GrayWrite-Host "  - demo:demo123 (ACTIVE; roles: user, read)" -ForegroundColor GrayWrite-Host "  - admin:admin123 (ACTIVE; roles: admin, user, read, write)" -ForegroundColor GrayWrite-Host "  - test:test123 (DISABLED)" -ForegroundColor GrayWrite-Host "  - service:service123 (ACTIVE; roles: service, read, write)" -ForegroundColor GrayWrite-Host ""Write-Host "Available OAuth clients:" -ForegroundColor GrayWrite-Host "  - demo-client:demo-secret (scopes: read, write)" -ForegroundColor GrayWrite-Host "  - test-client:test-secret (scopes: read)" -ForegroundColor GrayWrite-Host "  - admin-client:admin-secret (scopes: read, write, admin)" -ForegroundColor GrayWrite-Host "  - service-client:service-secret (scopes: service, read, write)" -ForegroundColor GrayWrite-Host "  - inactive-client:inactive-secret (DISABLED)" -ForegroundColor Gray