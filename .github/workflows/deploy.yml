name: Deploy Java Authorization Server

on:
  push:
    branches: [authserver.migration, develop]
  pull_request:
    branches: [authserver.migration]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'

env:
  AWS_REGION: us-east-1
  ARTIFACT_BUCKET_PREFIX: auth-server-artifacts

jobs:
  # Test and validate the code
  test:
    name: Test & Validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Run unit tests
        run: mvn clean test
      
      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            target/surefire-reports/
            target/jacoco/
      
      - name: Security scan - OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=7 \
            -DskipTestScope=true \
            -Dformats=HTML,JSON || true  # Always continue and generate report
        continue-on-error: true
      
      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report
          path: target/dependency-check-report.html
          if-no-files-found: warn  # Don't fail if file doesn't exist
      
      - name: Validate CloudFormation templates
        run: |
          # Install cfn-lint
          pip install cfn-lint
          
          # Validate main template (warnings won't fail the build)
          cfn-lint infrastructure/main-template.yaml --ignore-checks W
          
          # Validate nested templates
          find infrastructure/nested-stacks -name "*.yaml" -exec cfn-lint {} --ignore-checks W \;
      
      - name: Build Lambda package
        run: mvn clean package -DskipTests
      
      - name: Upload Lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: target/auth-server-lambda.jar
          retention-days: 30

  # Deploy to development environment
  deploy-dev:
    name: Deploy to Development
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/authserver.migration' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: 
      name: development
      url: ${{ steps.deploy.outputs.api_endpoint }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: target/
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to AWS
        id: deploy
        run: |
          chmod +x scripts/deploy.sh
          # Get AWS Account ID dynamically
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ./scripts/deploy.sh dev ${{ env.AWS_REGION }} ${{ env.ARTIFACT_BUCKET_PREFIX }} $ACCOUNT_ID
          
          # Extract API endpoint from deployment info
          API_ENDPOINT=$(jq -r '.apiEndpoint' deployment-info-dev.json)
          echo "api_endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT
      
      - name: Run smoke tests
        run: |
          chmod +x scripts/smoke-test.sh
          ./scripts/smoke-test.sh dev ${{ env.AWS_REGION }}
      
      - name: Upload deployment info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info-dev
          path: deployment-info-dev.json

  # Notification job
  notify:
    name: Notify Deployment Status
    needs: [deploy-dev]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.deploy-dev.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Development deployment completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT  
            echo "message=❌ Development deployment failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Send notification
        if: steps.status.outputs.status == 'success'
        run: |
          echo "Deployment Status: ${{ steps.status.outputs.message }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"

  # Cleanup job for failed deployments
  cleanup:
    name: Cleanup Failed Deployment
    needs: [deploy-dev]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Check for failed stacks
        run: |
          echo "Checking for failed CloudFormation stacks..."
          
          # Check only dev environment
          stack_name="java-auth-server-dev"
          status=$(aws cloudformation describe-stacks \
            --stack-name "$stack_name" \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "NOT_FOUND")
          
          echo "Stack $stack_name status: $status"
          
          if [[ "$status" == *"ROLLBACK"* ]] || [[ "$status" == *"FAILED"* ]]; then
            echo "⚠️  Found failed stack: $stack_name"
            echo "Consider manual intervention or cleanup"
          fi 